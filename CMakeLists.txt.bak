# cmake_minimum_required(VERSION 3.10)

# project(maCli)
# # maCli的编译选项
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -m64 -march=x86-64 -fpermissive -w -O2 -DPLATFORM=OS_IS_LINUX")
# #set(CMAKE_CXX_FLAGS "-D__LINUX__ -g -Wall -fPIC -pthread -m64 -march=x86-64 -fpermissive -w -O2 -DPLATFORM=OS_IS_LINUX") # 合并
# set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
# include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/include/c++)
# link_directories(${CMAKE_CURRENT_SOURCE_DIR}/bin/Lnx64 ${CMAKE_CURRENT_SOURCE_DIR}/lib/x64)
# aux_source_directory(${PROJECT_SOURCE_DIR}/src/macli TRADE_LIST)
# set(TRADE_LIBS maTradeApi
#         hare_socket
#         maCliApi
#         mathirdparty
#         xsdk
#         Objects
#         encrypt
#         rt
#         dl)

# # eqapi的编译选项
# # set(CMAKE_CXX_FLAGS "-D __LINUX__ -g -Wall -fPIC -pthread")
# # set(CMAKE_EXE_LINKER_FLAGS "-g -lpthread -lm")
# #include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
# # link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib ${CMAKE_CURRENT_SOURCE_DIR}/third)
# # aux_source_directory(${PROJECT_SOURCE_DIR}/src/eqapi EQAPI_LIST)
# # set(THIRD_LIBS bz2 dl m rt z crypto rqapi Ice IceUtil stdc++)

# add_executable(maCli ${TRADE_LIST}) #${EQAPI_LIST})



# target_link_libraries(maCli
#         ${TRADE_LIBS}
# )

cmake_minimum_required(VERSION 3.15)

project(maCli)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -march=x86-64 -fpermissive -w -O2 -DPLATFORM=OS_IS_LINUX")



set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin)

add_subdirectory(OpenXLSX)

find_program(ODB_COMPILER odb)
if(NOT ODB_COMPILER)
    message(FATAL_ERROR "ODB compiler not found. Please install ODB.")
endif()

# 2. 设置包含目录和库
set(ODB_INCLUDE_DIRS /usr/include)
set(ODB_LIBRARIES /usr/lib/x86_64-linux-gnu/libodb.so)  # 根据实际路径调整

# 3. ODB编译函数
function(odb_compile file)
    get_filename_component(filename ${file} NAME_WE)
    set(odb_files
            ${CMAKE_CURRENT_BINARY_DIR}/${filename}-odb.cxx
            ${CMAKE_CURRENT_BINARY_DIR}/${filename}-odb.hxx
            ${CMAKE_CURRENT_BINARY_DIR}/${filename}-odb.ixx
    )

    add_custom_command(
            OUTPUT ${odb_files}
            COMMAND ${ODB_COMPILER} -d sqlite --generate-query --generate-schema
            --output-dir ${CMAKE_CURRENT_BINARY_DIR}
            ${CMAKE_CURRENT_SOURCE_DIR}/${file}
            DEPENDS ${file}
    )

    set(ODB_GENERATED_SOURCES ${ODB_GENERATED_SOURCES} ${odb_files} PARENT_SCOPE)
endfunction()

# 4. 处理您的ODB文件
set(ODB_GENERATED_SOURCES "")
odb_compile(include/order.hxx)
odb_compile(include/trade.hxx)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/include/c++ ${CMAKE_CURRENT_BINARY_DIR} ${ODB_INCLUDE_DIRS})
link_directories(${CMAKE_CURRENT_SOURCE_DIR}/bin/Lnx64 ${CMAKE_CURRENT_SOURCE_DIR}/lib/linux)

aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/macli TRADE_LIST)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src MAIN_LIST)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/EventQueue QUE_LIST)

add_executable(maCli src/main.cpp ${QUE_LIST} ${TRADE_LIST}
        src/strategies/strategy_template.cpp
        src/strategies/strategy_template.h
        src/strategies/position.cpp
        src/strategies/position.h
        src/macli/MyFuncs.cpp
        src/macli/MyFuncs.h
        ${ODB_GENERATED_SOURCES})

file(GLOB SO_LIBS "${CMAKE_CURRENT_SOURCE_DIR}/lib/linux/*.so")
message(STATUS "Found shared libraries: ${SO_LIBS}")

target_link_libraries(maCli
        ${SO_LIBS}
        pthread
        OpenXLSX::OpenXLSX
        ${ODB_LIBRARIES}
        ${ODB_SQLITE_LIBRARIES})